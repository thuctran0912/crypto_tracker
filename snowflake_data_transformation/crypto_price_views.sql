CREATE OR REPLACE VIEW MSK_STREAMING_DB.MSK_STREAMING_SCHEMA.BTC_TRADING_VIEW AS
SELECT 
    DATE_TRUNC('second', TO_TIMESTAMP_NTZ(rc.value:t::NUMBER / 1000)) AS TRADE_TIME, 
    MIN(TO_TIMESTAMP_NTZ(rm:"CreateTime"::NUMBER / 1000)) AS CREATEDTIME, 
    rc.value:s::VARCHAR AS SYMBOL,
    AVG(rc.value:p::NUMBER(38, 2)) AS AVG_PRICE, 
    SUM(rc.value:v::NUMBER(38, 8)) AS VOLUME 
FROM MSK_STREAMING_DB.MSK_STREAMING_SCHEMA.LIVE_TRADE,
     LATERAL FLATTEN(input => RECORD_CONTENT:data) rc, 
     LATERAL (SELECT PARSE_JSON(RECORD_METADATA) AS rm) 
WHERE rc.value:s = 'BINANCE:BTCUSDT'
GROUP BY 
    DATE_TRUNC('second', TO_TIMESTAMP_NTZ(rc.value:t::NUMBER / 1000)), 
    rc.value:s 
ORDER BY 
    TRADE_TIME;


CREATE OR REPLACE VIEW MSK_STREAMING_DB.MSK_STREAMING_SCHEMA.ETH_TRADING_VIEW AS
SELECT 
    DATE_TRUNC('second', TO_TIMESTAMP_NTZ(rc.value:t::NUMBER / 1000)) AS TRADE_TIME, 
    MIN(TO_TIMESTAMP_NTZ(rm:"CreateTime"::NUMBER / 1000)) AS CREATEDTIME, 
    rc.value:s::VARCHAR AS SYMBOL,
    AVG(rc.value:p::NUMBER(38, 2)) AS AVG_PRICE, 
    SUM(rc.value:v::NUMBER(38, 8)) AS VOLUME 
FROM MSK_STREAMING_DB.MSK_STREAMING_SCHEMA.LIVE_TRADE,
     LATERAL FLATTEN(input => RECORD_CONTENT:data) rc, 
     LATERAL (SELECT PARSE_JSON(RECORD_METADATA) AS rm) 
WHERE rc.value:s = 'BINANCE:ETHUSDT'
GROUP BY 
    DATE_TRUNC('second', TO_TIMESTAMP_NTZ(rc.value:t::NUMBER / 1000)), 
    rc.value:s 
ORDER BY 
    TRADE_TIME;


select COUNT(*) from MSK_STREAMING_DB.MSK_STREAMING_SCHEMA.BTC_TRADING_VIEW order by trade_time;
select * from MSK_STREAMING_DB.MSK_STREAMING_SCHEMA.ETH_TRADING_VIEW;
